// app/(drawer)/(tabs)/qr.tsx
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Share as RNShare,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';
import { Download, Share2 } from 'lucide-react-native';
import { useUserContext } from '../../../context/UserContext';
import QRCodeSVG from 'react-native-qrcode-svg';
import { captureRef } from 'react-native-view-shot';
import * as FileSystem from 'expo-file-system';
import { useLocalization } from '../../../context/LocalizationContext';
import { fontSize, s, vs } from '../../../utils/responsive';
import GradientHeader from '../../../components/GradientHeader';

// Import MediaLibrary conditionally
let MediaLibrary: any = null;
try {
  MediaLibrary = require('expo-media-library');
} catch (error) {
  console.log('MediaLibrary not available in this environment');
}

export default function ResidentQRScreen() {
  const qrViewRef = React.useRef<View | null>(null);
  const [isSaving, setIsSaving] = React.useState(false);
  const [isSharing, setIsSharing] = React.useState(false);
  const userContext = useUserContext();
  const { t } = useLocalization();
  
  const residentName = userContext?.profileData?.name || 'Resident';
  const residentId = userContext?.profileData?.id || userContext?.profileData?.userId || 'RESIDENT-ID';
  const flatNumber = userContext?.profileData?.flatNumber || userContext?.profileData?.flat || 'N/A';
  const block = userContext?.profileData?.block || '';

  // Create QR data with resident information
  const qrData = JSON.stringify({
    type: 'resident',
    id: residentId,
    name: residentName,
    flat: flatNumber,
    block: block,
    generatedAt: new Date().toISOString(),
  });

  const handleSave = async () => {
    if (isSaving) return;
    
    setIsSaving(true);
    
    try {
      // Request permissions
      if (MediaLibrary) {
        const { status } = await MediaLibrary.requestPermissionsAsync();
        if (status !== 'granted') {
          Alert.alert(
            'Permission Required',
            'Please grant permission to save images to your photo library.',
            [{ text: 'OK' }]
          );
          return;
        }
      }

      // Capture the QR code view
      const uri = await captureRef(qrViewRef, {
        format: 'png',
        quality: 1.0,
        result: 'tmpfile',
      });

      if (MediaLibrary) {
        // Save to media library
        await MediaLibrary.saveToLibraryAsync(uri);
        
        Alert.alert(
          'Success!',
          'Your QR code has been saved to your photo library.',
          [{ text: 'OK' }]
        );
      } else {
        Alert.alert(
          'Save Not Available',
          'Saving to photo library is not available in this environment.',
          [{ text: 'OK' }]
        );
      }
    } catch (error) {
      console.error('Error saving QR code:', error);
      Alert.alert(
        'Error',
        'Failed to save QR code. Please try again.',
        [{ text: 'OK' }]
      );
    } finally {
      setIsSaving(false);
    }
  };

  const handleShare = async () => {
    if (isSharing) return;
    
    setIsSharing(true);
    let tempUri: string | null = null;
    
    try {
      // Capture the QR code view
      tempUri = await captureRef(qrViewRef, {
        format: 'png',
        quality: 1.0,
        result: 'tmpfile',
      });

      const fileInfo = await FileSystem.getInfoAsync(tempUri);
      if (!fileInfo.exists) {
        throw new Error('Failed to capture image');
      }

      // Share using React Native's built-in Share API
      const shareMessage = `🏠 Resident QR Code\n\n👤 Name: ${residentName}\n🏢 Flat: ${block ? `${block}-` : ''}${flatNumber}\n\nGenerated by SecureIN App`;
      
      await RNShare.share({
        message: shareMessage,
        title: 'Resident QR Code',
      });

    } catch (error: any) {
      console.error('Error sharing QR code:', error);
      
      if (error.message !== 'User did not share') {
        Alert.alert(
          'Share Failed',
          'Unable to share the QR code. Please try saving it instead.',
          [
            { text: 'Save to Photos', onPress: handleSave },
            { text: 'OK', style: 'cancel' }
          ]
        );
      }
    } finally {
      // Clean up temporary file
      if (tempUri) {
        setTimeout(async () => {
          try {
            await FileSystem.deleteAsync(tempUri!, { idempotent: true });
          } catch (cleanupError) {
            console.log('Cleanup error (non-critical):', cleanupError);
          }
        }, 3000);
      }
      
      setIsSharing(false);
    }
  };

  return (
    <SafeAreaView style={styles.container} edges={[]}>
      <GradientHeader title="Resident's QR" />
      
      <ScrollView 
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        <View style={styles.content}>
          {/* QR Code Card */}
          <View ref={qrViewRef} collapsable={false} style={styles.qrCard}>
            <LinearGradient
              colors={['#2196F3', '#1E88E5']}
              style={styles.qrGradient}
            >
              <View style={styles.qrHeader}>
                <Text style={styles.qrHeaderText}>RESIDENT PASS</Text>
              </View>
              
              <View style={styles.qrCodeWrapper}>
                <View style={styles.qrCodeContainer}>
                  <QRCodeSVG
                    value={qrData}
                    size={220}
                    backgroundColor="white"
                  />
                </View>
              </View>
            </LinearGradient>
          </View>

          {/* How to Use Section */}
          <View style={styles.instructionsCard}>
            <Text style={styles.instructionsTitle}>How to Use</Text>
            
            <View style={styles.instructionItem}>
              <Text style={styles.instructionNumber}>1</Text>
              <Text style={styles.instructionText}>
                Show this QR code to the security guard at the gate
              </Text>
            </View>
            
            <View style={styles.instructionItem}>
              <Text style={styles.instructionNumber}>2</Text>
              <Text style={styles.instructionText}>
                The guard will scan it to verify your identity
              </Text>
            </View>
            
            <View style={styles.instructionItem}>
              <Text style={styles.instructionNumber}>3</Text>
              <Text style={styles.instructionText}>
                Once verified, you'll be granted access to the premises
              </Text>
            </View>
          </View>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
  },
  scrollContent: {
    flexGrow: 1,
    paddingBottom: vs(20),
  },
  content: {
    padding: s(20),
    alignItems: 'center',
  },
  infoSection: {
    width: '100%',
    marginBottom: vs(20),
    alignItems: 'center',
  },
  title: {
    fontSize: fontSize.large,
    fontWeight: 'bold',
    color: '#1E293B',
    marginBottom: vs(8),
    textAlign: 'center',
  },
  subtitle: {
    fontSize: fontSize.medium,
    color: '#64748B',
    textAlign: 'center',
    paddingHorizontal: s(20),
  },
  qrCard: {
    width: '100%',
    maxWidth: s(350),
    borderRadius: 16,
    overflow: 'hidden',
    elevation: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    marginBottom: vs(24),
  },
  qrGradient: {
    padding: s(20),
    alignItems: 'center',
  },
  qrHeader: {
    marginBottom: vs(16),
  },
  qrHeaderText: {
    fontSize: fontSize.large,
    fontWeight: 'bold',
    color: '#FFFFFF',
    letterSpacing: 2,
  },
  qrCodeWrapper: {
    padding: s(16),
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    borderRadius: 12,
    marginBottom: vs(20),
  },
  qrCodeContainer: {
    backgroundColor: 'white',
    padding: s(12),
    borderRadius: 8,
  },
  qrDetails: {
    width: '100%',
    backgroundColor: 'rgba(255, 255, 255, 0.15)',
    borderRadius: 12,
    padding: s(16),
  },
  qrDetailLabel: {
    fontSize: fontSize.small,
    color: '#E3F2FD',
    marginBottom: vs(4),
    fontWeight: '600',
  },
  qrDetailValue: {
    fontSize: fontSize.medium,
    color: '#FFFFFF',
    fontWeight: 'bold',
    marginBottom: vs(12),
  },
  qrDetailValueSmall: {
    fontSize: fontSize.small,
    color: '#FFFFFF',
    fontWeight: '600',
  },
  qrDetailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: vs(12),
  },
  qrDetailColumn: {
    flex: 1,
  },
  actionButtons: {
    flexDirection: 'row',
    width: '100%',
    maxWidth: s(350),
    gap: s(12),
    marginBottom: vs(24),
  },
  actionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: vs(14),
    paddingHorizontal: s(16),
    borderRadius: 12,
    gap: s(8),
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.15,
    shadowRadius: 4,
  },
  saveButton: {
    backgroundColor: '#10B981',
  },
  shareButton: {
    backgroundColor: '#2196F3',
  },
  actionButtonText: {
    fontSize: fontSize.medium,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  instructionsCard: {
    width: '100%',
    maxWidth: s(350),
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: s(20),
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  instructionsTitle: {
    fontSize: fontSize.medium,
    fontWeight: 'bold',
    color: '#1E293B',
    marginBottom: vs(16),
  },
  instructionItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: vs(12),
  },
  instructionNumber: {
    width: s(24),
    height: s(24),
    borderRadius: s(12),
    backgroundColor: '#2196F3',
    color: '#FFFFFF',
    fontSize: fontSize.small,
    fontWeight: 'bold',
    textAlign: 'center',
    lineHeight: s(24),
    marginRight: s(12),
  },
  instructionText: {
    flex: 1,
    fontSize: fontSize.medium,
    color: '#64748B',
    lineHeight: fontSize.medium * 1.5,
  },
});